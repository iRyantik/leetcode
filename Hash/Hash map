//leetcode1&15
//map的价值在于表示两种意义
//梦开始的地方，我也做了好几个版本
//map
class Solution {
public:
    vector<int> twoSum(vector<int> &nums, int target) {
        map<int,int> m;
        vector<int> arr;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]=i;
        }
        for(int i=0;i<nums.size();i++){
            if(m.count(target-nums[i])>0&&i!=m[target-nums[i]]){
                arr.push_back(i);
                arr.push_back(m[target-nums[i]]);
                break;
            }
        }
        return arr;
    }
};
//set
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_set<int> arrs(nums.begin(),nums.end());
        vector<int> result;
        for(int i=0;i<nums.size();i++){
            if(arrs.count(target-nums[i])==1){
                result.push_back(i);
            }
        }
        if(result.size()%2==1){
            for(int i=0;i<result.size();i++){
                if(2*nums[result[i]]==target){
                    result.erase(result.begin()+i);
                }
            }
        }
        return result;
    }
};
//map
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        std::unordered_map <int,int> map;
        for(int i = 0; i < nums.size(); i++) {
            auto iter = map.find(target - nums[i]); 
            if(iter != map.end()) {
                return {iter->second, i};
            }
            map.insert(pair<int, int>(nums[i], i)); 
        }
        return {};
    }
};
